{"version":3,"file":"static/js/807.373d3d6e.chunk.js","mappings":"sKACA,MAAyB,uB,SCUzB,MATA,WACE,OACE,iBAAKA,UAAWC,EAAhB,WACE,qBACA,qBACA,yB,wPCPAC,EAAW,gCACXC,EAAM,mCAAZ,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,IACd,OAAOV,EAAuB,GAAD,OACxBF,EADwB,uCACeC,IAIvC,SAASY,EAAgBC,GAC9B,OAAOZ,EAAuB,GAAD,OACxBF,EADwB,gCACQC,EADR,iCACoCa,IAI5D,SAASC,EAAsBC,GACpC,OAAOd,EAAuB,GAAD,OAAIF,EAAJ,kBAAsBgB,EAAtB,oBAAyCf,IAGjE,SAASgB,EAAcD,GAC5B,OAAOd,EAAuB,GAAD,OACxBF,EADwB,kBACNgB,EADM,4BACqBf,IAI7C,SAASiB,EAAaF,GAC3B,OAAOd,EAAuB,GAAD,OACxBF,EADwB,iBACPgB,EADO,4BACoBf,M,kHCjCnD,GAAgB,KAAO,yBAAyB,KAAO,0B,SCkCvD,MA/BA,YAAkC,IAAZkB,EAAW,EAAXA,QACpB,OACE,+BACE,eAAIrB,UAAWC,EAAAA,KAAf,SACGoB,EAAQC,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,MAC/B,OACE,gBAAazB,UAAWC,EAAAA,KAAxB,WACE,SAAC,KAAD,CAAMyB,GAAE,UAAKH,GAAb,UACE,gBACEvB,UAAWC,EAAAA,UACX0B,IAAG,yCAAoCH,GACvCI,IAAKH,OAGT,gBAAKzB,UAAWC,EAAAA,kBAAhB,UACE,eAAID,UAAWC,EAAAA,WAAf,SAA8BwB,QATzBF,W,SCTrB,EAA6B,+BAA7B,EAA+E,qCAA/E,EAA4I,0CAA5I,EAAwM,oCAAxM,EAAuP,6BCOxO,SAASM,IACtB,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOT,EAAP,KAAgBU,EAAhB,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAaF,EAAaG,IAAI,SAAW,IAE/CC,EAAAA,EAAAA,YAAU,WACJF,IACFJ,GAAW,IACXlB,EAAAA,EAAAA,IAAgBsB,GACbG,MAAK,YAAkB,IAAfnB,EAAc,EAAdA,QACPU,EAAWV,MAEZoB,SAAQ,WACPR,GAAW,SAGhB,CAACI,IAYJ,OACE,iCACE,kBAAMrC,UAAWC,EAAcyC,SAZd,SAACC,GACpBA,EAAEC,iBACF,IAAM5B,EAAO2B,EAAEE,OAAOC,OAAOC,MAE7B,GAAoB,KAAhB/B,EAAKgC,OACP,OAAOC,MAAM,yBAEfb,EAAgB,CAAEc,KAAMlC,KAKtB,WACE,oBAAQmC,KAAK,SAASnD,UAAWC,EAAjC,WACE,SAAC,MAAD,CAAUD,UAAWC,KACrB,iBAAMD,UAAWC,EAAjB,wBAEF,kBACED,UAAWC,EACXkD,KAAK,OACLnC,KAAK,SACLoC,aAAa,MACbC,WAAS,EACTC,YAAY,oBAGftB,IAAW,SAACuB,EAAA,EAAD,KACZ,SAAC,EAAD,CAAYlC,QAASA","sources":["webpack://goit-react-hw-05-movies/./src/components/Loader/Loader.module.css?d03f","components/Loader/Loader.jsx","services/API.js","webpack://goit-react-hw-05-movies/./src/components/ListMovies/ListMovies.module.css?08bb","components/ListMovies/ListMovies.jsx","webpack://goit-react-hw-05-movies/./src/views/MoviesPage/MoviesPage.module.css?0f72","views/MoviesPage/MoviesPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loader\":\"Loader_loader__jYjgr\",\"bouncingLoader\":\"Loader_bouncingLoader__+XNsm\"};","import s from \"./Loader.module.css\";\r\n\r\nfunction Loader() {\r\n  return (\r\n    <div className={s.loader}>\r\n      <span></span>\r\n      <span></span>\r\n      <span></span>\r\n    </div>\r\n  );\r\n}\r\nexport default Loader;\r\n","const BASE_URL = \"https://api.themoviedb.org/3/\";\r\nconst KEY = \"dcf3bb54120e2f9c59dbcbb87469478c\";\r\n\r\nasync function fetchWithErrorHandling(url = \"\", config = {}) {\r\n  const response = await fetch(url, config);\r\n  return response.ok\r\n    ? await response.json()\r\n    : Promise.reject(new Error(\"Not found\"));\r\n}\r\n\r\nexport function fetchHomePage() {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}trending/movies/day?api_key=${KEY}`\r\n  );\r\n}\r\n\r\nexport function fetchMoviesPage(name) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}search/movie?api_key=${KEY}&language=en-US&query=${name}`\r\n  );\r\n}\r\n\r\nexport function fetchMovieDetailsPage(movieId) {\r\n  return fetchWithErrorHandling(`${BASE_URL}/movie/${movieId}?api_key=${KEY}`);\r\n}\r\n\r\nexport function FetchFilmCast(movieId) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}`\r\n  );\r\n}\r\n\r\nexport function fetchReviews(movieId) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}movie/${movieId}/reviews?api_key=${KEY}`\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"home\":\"ListMovies_home__KGg3s\",\"card\":\"ListMovies_card__HHSEN\"};","import { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./ListMovies.module.css\";\r\n\r\nfunction ListMovies({ results }) {\r\n  return (\r\n    <>\r\n      <ul className={s.home}>\r\n        {results.map(({ id, poster_path, title }) => {\r\n          return (\r\n            <li key={id} className={s.card}>\r\n              <Link to={`${id}`}>\r\n                <img\r\n                  className={s.card__img}\r\n                  src={`https://image.tmdb.org/t/p/w200${poster_path}`}\r\n                  alt={title}\r\n                />\r\n              </Link>\r\n              <div className={s.card__information}>\r\n                <h2 className={s.card__name}>{title}</h2>\r\n              </div>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\nListMovies.propTypes = {\r\n  results: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n    })\r\n  ),\r\n};\r\nexport default ListMovies;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"SearchForm\":\"MoviesPage_SearchForm__RxX1i\",\"SearchFormButton\":\"MoviesPage_SearchFormButton__f8juM\",\"SearchFormButtonLabel\":\"MoviesPage_SearchFormButtonLabel__RgUTm\",\"SearchFormInput\":\"MoviesPage_SearchFormInput__1hBkd\",\"ImSearch\":\"MoviesPage_ImSearch__DYBb8\"};","import { useState, useEffect } from \"react\";\r\nimport { fetchMoviesPage } from \"../../services/API\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport { ImSearch } from \"react-icons/im\";\r\nimport ListMovies from \"../../components/ListMovies\";\r\nimport Loader from \"../../components/Loader\";\r\nimport s from \"./MoviesPage.module.css\";\r\n\r\nexport default function MoviesPage() {\r\n  const [results, setResults] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const searchName = searchParams.get(\"film\") || \"\";\r\n\r\n  useEffect(() => {\r\n    if (searchName) {\r\n      setLoading(true);\r\n      fetchMoviesPage(searchName)\r\n        .then(({ results }) => {\r\n          setResults(results);\r\n        })\r\n        .finally(() => {\r\n          setLoading(false);\r\n        });\r\n    }\r\n  }, [searchName]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const name = e.target.search.value;\r\n\r\n    if (name.trim() === \"\") {\r\n      return alert(`Enter name for search`);\r\n    }\r\n    setSearchParams({ film: name });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className={s.SearchForm} onSubmit={handleSubmit}>\r\n        <button type=\"submit\" className={s.SearchFormButton}>\r\n          <ImSearch className={s.ImSearch} />\r\n          <span className={s.SearchFormButtonLabel}>Search</span>\r\n        </button>\r\n        <input\r\n          className={s.SearchFormInput}\r\n          type=\"name\"\r\n          name=\"search\"\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n          placeholder=\"Search films\"\r\n        />\r\n      </form>\r\n      {loading && <Loader />}\r\n      <ListMovies results={results} />\r\n    </>\r\n  );\r\n}\r\n"],"names":["className","s","BASE_URL","KEY","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchHomePage","fetchMoviesPage","name","fetchMovieDetailsPage","movieId","FetchFilmCast","fetchReviews","results","map","id","poster_path","title","to","src","alt","MoviesPage","useState","setResults","loading","setLoading","useSearchParams","searchParams","setSearchParams","searchName","get","useEffect","then","finally","onSubmit","e","preventDefault","target","search","value","trim","alert","film","type","autoComplete","autoFocus","placeholder","Loader"],"sourceRoot":""}
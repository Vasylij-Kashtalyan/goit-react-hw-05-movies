{"version":3,"file":"static/js/120.e1ca9ec7.chunk.js","mappings":"sKACA,MAAyB,uB,SCUzB,MATA,WACE,OACE,iBAAKA,UAAWC,EAAhB,WACE,qBACA,qBACA,yB,sLCNN,GAAgB,KAAO,yBAAyB,KAAO,0B,SC4BvD,MA1BA,YAAkC,IAAZC,EAAW,EAAXA,QACdC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,+BACE,eAAIJ,UAAWC,EAAAA,KAAf,SACGC,EAAQG,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,MAC/B,OACE,gBAAaR,UAAWC,EAAAA,KAAxB,WACE,SAAC,KAAD,CAAMQ,MAAO,CAAEC,KAAMP,GAAYQ,GAAE,UAAKL,GAAxC,UACE,gBACEN,UAAWC,EAAAA,UACXW,IAAG,yCAAoCL,GACvCM,IAAKL,OAGT,gBAAKR,UAAWC,EAAAA,kBAAhB,UACE,eAAID,UAAWC,EAAAA,WAAf,SAA8BO,QATzBF,W,kBCVrB,EAA6B,+BAA7B,EAA+E,qCAA/E,EAA4I,0CAA5I,EAAwM,oCAAxM,EAAuP,6BCMxO,SAASQ,IACtB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,UAAS,IAAvC,eAAOb,EAAP,KAAgBgB,EAAhB,KACA,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KAsBA,OACE,iCACE,kBAAMpB,UAAWC,EAAcoB,SAtBb,SAACC,GACrBA,EAAIC,iBACgB,KAAhBP,EAAKQ,QAITJ,GAAW,IACXK,EAAAA,EAAAA,IAAgBT,GAAMU,MAAK,YAAkB,IAAfxB,EAAc,EAAdA,QAG5B,GAFAkB,GAAW,GAEY,IAAnBlB,EAAQyB,OACV,OAAOC,MAAM,qBAAD,OAAsBZ,EAAtB,MAEdE,EAAWhB,GACXkB,GAAW,OAXXQ,MAAM,8BAmBN,WACE,oBAAQC,KAAK,SAAS7B,UAAWC,EAAjC,WACE,SAAC,MAAD,CAAUD,UAAWC,KACrB,iBAAMD,UAAWC,EAAjB,wBAGF,kBACEe,KAAK,OACLc,SAZmB,SAACR,GAAD,OAASL,EAAQK,EAAIS,cAAcC,QAatDA,MAAOhB,EACPhB,UAAWC,EACX4B,KAAK,OACLI,aAAa,MACbC,WAAS,EACTC,YAAY,qBAGfhB,IAAW,SAACiB,EAAA,EAAD,KACZ,SAAC,EAAD,CAAYlC,QAASA,S,oLCpDrBmC,EAAW,gCACXC,EAAM,mCAAZ,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,IACd,OAAOV,EAAuB,GAAD,OACxBF,EADwB,uCACeC,IAIvC,SAASb,EAAgBT,GAC9B,OAAOuB,EAAuB,GAAD,OACxBF,EADwB,gCACQC,EADR,iCACoCtB,IAI5D,SAASkC,EAAsBC,GACpC,OAAOZ,EAAuB,GAAD,OAAIF,EAAJ,kBAAsBc,EAAtB,oBAAyCb,IAGjE,SAASc,EAAcD,GAC5B,OAAOZ,EAAuB,GAAD,OACxBF,EADwB,kBACNc,EADM,4BACqBb,IAI7C,SAASe,EAAaF,GAC3B,OAAOZ,EAAuB,GAAD,OACxBF,EADwB,iBACPc,EADO,4BACoBb","sources":["webpack://goit-react-hw-05-movies/./src/components/Loader/Loader.module.css?d03f","components/Loader/Loader.jsx","webpack://goit-react-hw-05-movies/./src/views/ListMovies.module.css?3647","views/ListMovies.jsx","webpack://goit-react-hw-05-movies/./src/components/MoviesPage/MoviesPage.module.css?564c","components/MoviesPage/MoviesPage.jsx","services/API.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loader\":\"Loader_loader__jYjgr\",\"bouncingLoader\":\"Loader_bouncingLoader__+XNsm\"};","import s from \"./Loader.module.css\";\r\n\r\nfunction Loader() {\r\n  return (\r\n    <div className={s.loader}>\r\n      <span></span>\r\n      <span></span>\r\n      <span></span>\r\n    </div>\r\n  );\r\n}\r\nexport default Loader;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"home\":\"ListMovies_home__4SBlc\",\"card\":\"ListMovies_card__uTmJz\"};","import { Link, useLocation } from \"react-router-dom\";\r\nimport s from \"./ListMovies.module.css\";\r\n\r\nfunction ListMovies({ results }) {\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <>\r\n      <ul className={s.home}>\r\n        {results.map(({ id, poster_path, title }) => {\r\n          return (\r\n            <li key={id} className={s.card}>\r\n              <Link state={{ from: location }} to={`${id}`}>\r\n                <img\r\n                  className={s.card__img}\r\n                  src={`https://image.tmdb.org/t/p/w200${poster_path}`}\r\n                  alt={title}\r\n                />\r\n              </Link>\r\n              <div className={s.card__information}>\r\n                <h2 className={s.card__name}>{title}</h2>\r\n              </div>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\nexport default ListMovies;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"SearchForm\":\"MoviesPage_SearchForm__LQeVR\",\"SearchFormButton\":\"MoviesPage_SearchFormButton__s1390\",\"SearchFormButtonLabel\":\"MoviesPage_SearchFormButtonLabel__HnXjl\",\"SearchFormInput\":\"MoviesPage_SearchFormInput__RDUxb\",\"ImSearch\":\"MoviesPage_ImSearch__UiUIk\"};","import { fetchMoviesPage } from \"../../services/API\";\r\nimport { useState } from \"react\";\r\nimport ListMovies from \"../../views/ListMovies\";\r\nimport { ImSearch } from \"react-icons/im\";\r\nimport Loader from \"../Loader\";\r\nimport s from \"./MoviesPage.module.css\";\r\n\r\nexport default function MoviesPage() {\r\n  const [name, setName] = useState(\"\");\r\n  const [results, setResults] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handlerSubmit = (evt) => {\r\n    evt.preventDefault();\r\n    if (name.trim() === \"\") {\r\n      alert(\"Enter a name search for..\");\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    fetchMoviesPage(name).then(({ results }) => {\r\n      setLoading(false);\r\n\r\n      if (results.length === 0) {\r\n        return alert(`Nothing found for ${name} `);\r\n      }\r\n      setResults(results);\r\n      setLoading(false);\r\n    });\r\n  };\r\n\r\n  const handlerNameChanche = (evt) => setName(evt.currentTarget.value);\r\n\r\n  return (\r\n    <>\r\n      <form className={s.SearchForm} onSubmit={handlerSubmit}>\r\n        <button type=\"submit\" className={s.SearchFormButton}>\r\n          <ImSearch className={s.ImSearch} />\r\n          <span className={s.SearchFormButtonLabel}>Search</span>\r\n        </button>\r\n\r\n        <input\r\n          name=\"name\"\r\n          onChange={handlerNameChanche}\r\n          value={name}\r\n          className={s.SearchFormInput}\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n          placeholder=\"Search movies\"\r\n        />\r\n      </form>\r\n      {loading && <Loader />}\r\n      <ListMovies results={results} />\r\n    </>\r\n  );\r\n}\r\n","const BASE_URL = \"https://api.themoviedb.org/3/\";\r\nconst KEY = \"dcf3bb54120e2f9c59dbcbb87469478c\";\r\n\r\nasync function fetchWithErrorHandling(url = \"\", config = {}) {\r\n  const response = await fetch(url, config);\r\n  return response.ok\r\n    ? await response.json()\r\n    : Promise.reject(new Error(\"Not found\"));\r\n}\r\n\r\nexport function fetchHomePage() {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}trending/movies/day?api_key=${KEY}`\r\n  );\r\n}\r\n\r\nexport function fetchMoviesPage(name) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}search/movie?api_key=${KEY}&language=en-US&query=${name}`\r\n  );\r\n}\r\n\r\nexport function fetchMovieDetailsPage(movieId) {\r\n  return fetchWithErrorHandling(`${BASE_URL}/movie/${movieId}?api_key=${KEY}`);\r\n}\r\n\r\nexport function FetchFilmCast(movieId) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}`\r\n  );\r\n}\r\n\r\nexport function fetchReviews(movieId) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}movie/${movieId}/reviews?api_key=${KEY}`\r\n  );\r\n}\r\n"],"names":["className","s","results","location","useLocation","map","id","poster_path","title","state","from","to","src","alt","MoviesPage","useState","name","setName","setResults","loading","setLoading","onSubmit","evt","preventDefault","trim","fetchMoviesPage","then","length","alert","type","onChange","currentTarget","value","autoComplete","autoFocus","placeholder","Loader","BASE_URL","KEY","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchHomePage","fetchMovieDetailsPage","movieId","FetchFilmCast","fetchReviews"],"sourceRoot":""}